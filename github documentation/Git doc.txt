better work from ssh client

git config - gives you all possible commands

git config --global user.name ""
git config --global user.email c@g.com 

git config --list  - shows all settings

git help
git help config - help to specific command(config)

git init - inisiallisaton of git in specific project

git clone [url] - copy existing project to your repository. its build a grit package and put there an existing project. If you want another name for grit, just write url name/grit.git newname it will be an untracked file!!!

git add [filename in your package] - lets changes to be commited

git add . - save changes in the repository

git add '*.txt' - adds all the files with .txt

git status - shows your status 

.[oa] - it will ignore all files that finish with 'oa'. And will not copy it to repository. It's good for dist package, bundle.js...

git diff - to see what's you've change but still not indexed

git commit - save all the chages you made. Be sure that before you made an "git add" command
for getting out from commit you need wrire the comment; push ESC; :wq ; ENTER

git commit -a - making index ad save the changes

git commit -m "some commets for this commit"

git rm - delete the index of file before the total delete (git commit)

 git mv readme.txt readme - renaming readme.txt to readme
 
 git log - Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them.

 git commit --amend - cancel the last commit
 
 git reset HEAD filename  - cancel the indexsation of the file
 
 git remote - shows the deleted repositories
 
 git remote -v - shows the URL of remoted repository
 
 git remote add [name][URL] - return the remoted file
 
 git fetch [filename] - same shit, different name
 
 git pull origin master - like git status to remote repository

 git push -u origin master - The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do.

 git tag     - shows all the 'tag tree'
 git tag -a
 
 git config --global alias.ci commit -  from now you can write "git ci" and not "git commit"
 
 git branch testing - build the new branch named "testing"
 
 git checkout testing - pass to the new branch, named "testing"
 
 git checkout -b "branch name" - create a new branch and swiching on it
 
 git merge master - making update of commit info on the new branch and pass the changes to master. The new branch also points to master
 
 git branch -d [branch name] - remote a branch
 
 git branch - shows the names of existing branches. '*' symbol shows on witch branch you sitiing right now
 
  git branch -v - shows the last commit on every branch
  
  git branch --merged -        shows the branches that you've already merged with master
  git branch --no-merged -     -//- not merged
  
  !!! If a branch not marged, you can't delete it with git branch -d and you can do it by the next command
  git branch -D
  
  git push [name of the server you sending] [branch name] - update the server brunch
  
  git push [name of the server you sending] [branch name]:[branch name] -same shit different name. You can give another name to the branch on the web server
  
  git push [webserver name] [branch name] - delete branch from the webserver
  
  git rebase --onto [main branch] [child branch] [grandson branch] - making marge to main branch from grandson branch
  

git remote add origin [remote refository]  
________________________________________________________________________________________________________________________________________________________________________
  
  SSH protocol
  A common transport protocol for Git when self-hosting is over SSH.
  This is because SSH access to servers is already set up in most places – and if it isn’t, it’s easy to do.
  SSH is also an authenticated network protocol; and because it’s ubiquitous, it’s generally easy to set up and use.
  
  git clone ssh://user@server/project.git  - clonning the project to web repository
  git clone ssh://user@server:project.git
  
  
  The Git Protocol
Next is the Git protocol. This is a special daemon that comes packaged with Git; 
it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication. 
In order for a repository to be served over the Git protocol, you must create the git-daemon-export-ok file – the daemon won’t serve a repository without that file in it – but other than that there is no security.
Either the Git repository is available for everyone to clone or it isn’t.
This means that there is generally no pushing over this protocol. 
You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project’s URL could push to your project. 
Suffice it to say that this is rare.
  
  
 The HTTP Protocols
Git can communicate over HTTP in two different modes.
 Prior to Git 1.6.6 there was only one way it could do this which was very simple and generally read-only. 
 In version 1.6.6 a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH. 
 In the last few years, this new HTTP protocol has become very popular since it’s simpler for the user and smarter about how it communicates. 
 The newer version is often referred to as the “Smart” HTTP protocol and the older way as “Dumb” HTTP. We’ll cover the newer “smart” HTTP protocol first.
 
you need install "post-update"
 
cd /var/www/htdocs/ - this catalog ussialy used by Apache, but you can use also another catalog
git clone --bare /path/to/git_project gitproject.git
cd gitproject.git
mv hooks/post-update.sample hooks/post-update
chmod a+x hooks/post-update
  

  
git clone --bare my_project my_project.git  - initialized empty Git repository in opt/projects/my_project.git/

 scp -r my_project.git user@git.examle.com:/opt/git - the settings of server is: git.exapmle.com with SSH protocol. yours repositories will be in opt/git catalog. 

git init --bare --sared - let's to group users make a changes in repository

 
  
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



